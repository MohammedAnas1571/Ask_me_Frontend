{"version":3,"sources":["../src/index.ts","../src/input.tsx","../src/regexp.tsx","../src/sync-timeouts.ts","../src/use-pwm-badge.tsx","../src/use-previous.ts"],"sourcesContent":["export * from './input'\nexport * from './regexp'\nexport { OTPInputProps, SlotProps, RenderProps } from './types'\n","'use client'\n\nimport * as React from 'react'\n\nimport { REGEXP_ONLY_DIGITS } from './regexp'\nimport { syncTimeouts } from './sync-timeouts'\nimport { OTPInputProps } from './types'\nimport { usePasswordManagerBadge } from './use-pwm-badge'\nimport { usePrevious } from './use-previous'\n\nexport const OTPInput = React.forwardRef<HTMLInputElement, OTPInputProps>(\n  (\n    {\n      value: uncheckedValue,\n      onChange: uncheckedOnChange,\n      maxLength,\n      textAlign = 'left',\n      pattern = REGEXP_ONLY_DIGITS,\n      inputMode = 'numeric',\n      onComplete,\n      pushPasswordManagerStrategy = 'increase-width',\n      render,\n      containerClassName,\n      noScriptCSSFallback = NOSCRIPT_CSS_FALLBACK,\n      ...props\n    },\n    ref,\n  ) => {\n    // Only used when `value` state is not provided\n    const [internalValue, setInternalValue] = React.useState(\n      typeof props.defaultValue === 'string' ? props.defaultValue : '',\n    )\n\n    // Definitions\n    const value = uncheckedValue ?? internalValue\n    const previousValue = usePrevious(value)\n    const onChange = React.useCallback(\n      (newValue: string) => {\n        uncheckedOnChange?.(newValue)\n        setInternalValue(newValue)\n      },\n      [uncheckedOnChange],\n    )\n    const regexp = React.useMemo(\n      () =>\n        pattern\n          ? typeof pattern === 'string'\n            ? new RegExp(pattern)\n            : pattern\n          : null,\n      [pattern],\n    )\n\n    /** useRef */\n    const inputRef = React.useRef<HTMLInputElement>(null)\n    const containerRef = React.useRef<HTMLDivElement>(null)\n    const pwmAreaRef = React.useRef<HTMLDivElement>(null)\n    const initialLoadRef = React.useRef({\n      value,\n      onChange,\n      isIOS:\n        typeof window !== 'undefined' &&\n        window?.CSS?.supports('-webkit-touch-callout', 'none'),\n    })\n    const inputMetadataRef = React.useRef<{\n      prev: [number | null, number | null, 'none' | 'forward' | 'backward']\n    }>({\n      prev: [\n        inputRef.current?.selectionStart,\n        inputRef.current?.selectionEnd,\n        inputRef.current?.selectionDirection,\n      ],\n    })\n    React.useImperativeHandle(ref, () => inputRef.current, [])\n    React.useEffect(() => {\n      const input = inputRef.current\n      const container = containerRef.current\n\n      if (!input || !container) {\n        return\n      }\n\n      // Sync input value\n      if (initialLoadRef.current.value !== input.value) {\n        initialLoadRef.current.onChange(input.value)\n      }\n\n      // Previous selection\n      inputMetadataRef.current.prev = [\n        input.selectionStart,\n        input.selectionEnd,\n        input.selectionDirection,\n      ]\n      function onDocumentSelectionChange() {\n        if (document.activeElement !== input) {\n          setMirrorSelectionStart(null)\n          setMirrorSelectionEnd(null)\n          return\n        }\n\n        // Aliases\n        const _s = input.selectionStart\n        const _e = input.selectionEnd\n        const _dir = input.selectionDirection\n        const _ml = input.maxLength\n        const _val = input.value\n        const _prev = inputMetadataRef.current.prev\n\n        // Algorithm\n        let start = -1\n        let end = -1\n        let direction: 'forward' | 'backward' | 'none' = undefined\n        if (_val.length !== 0 && _s !== null && _e !== null) {\n          const isSingleCaret = _s === _e\n          const isInsertMode = _s === _val.length && _val.length < _ml\n\n          if (isSingleCaret && !isInsertMode) {\n            const c = _s\n            if (c === 0) {\n              start = 0\n              end = 1\n              direction = 'forward'\n            } else if (c === _ml) {\n              start = c - 1\n              end = c\n              direction = 'backward'\n            } else if (_ml > 2 && _val.length > 2) {\n              let offset = 0\n              if (_prev[0] !== null && _prev[1] !== null) {\n                direction = c < _prev[1] ? 'backward' : 'forward'\n                const wasPreviouslyInserting =\n                  _prev[0] === _prev[1] && _prev[0] < _ml\n                if (direction === 'backward' && !wasPreviouslyInserting) {\n                  offset = -1\n                }\n              }\n\n              start = offset + c\n              end = offset + c + 1\n            }\n          }\n\n          if (start !== -1 && end !== -1 && start !== end) {\n            inputRef.current.setSelectionRange(start, end, direction)\n          }\n        }\n\n        // Finally, update the state\n        const s = start !== -1 ? start : _s\n        const e = end !== -1 ? end : _e\n        const dir = direction ?? _dir\n        setMirrorSelectionStart(s)\n        setMirrorSelectionEnd(e)\n        // Store the previous selection value\n        inputMetadataRef.current.prev = [s, e, dir]\n      }\n      document.addEventListener('selectionchange', onDocumentSelectionChange, {\n        capture: true,\n      })\n\n      // Set initial mirror state\n      onDocumentSelectionChange()\n      document.activeElement === input && setIsFocused(true)\n\n      // Apply needed styles\n      if (!document.getElementById('input-otp-style')) {\n        const styleEl = document.createElement('style')\n        styleEl.id = 'input-otp-style'\n        document.head.appendChild(styleEl)\n\n        if (styleEl.sheet) {\n          const autofillStyles =\n            'background: transparent !important; text: transparent !important; border-color: transparent !important; opacity: 0 !important; box-shadow: none !important; -webkit-box-shadow: none !important; -webkit-text-fill-color: transparent !important;'\n\n          safeInsertRule(\n            styleEl.sheet,\n            '[data-input-otp]::selection { background: transparent !important; }',\n          )\n          safeInsertRule(\n            styleEl.sheet,\n            `[data-input-otp]:autofill { ${autofillStyles} }`,\n          )\n          safeInsertRule(\n            styleEl.sheet,\n            `[data-input-otp]:-webkit-autofill { ${autofillStyles} }`,\n          )\n          // iOS\n          safeInsertRule(\n            styleEl.sheet,\n            `@supports (-webkit-touch-callout: none) { [data-input-otp] { letter-spacing: -.6em !important; font-weight: 100 !important; font-stretch: ultra-condensed; font-optical-sizing: none !important; left: -1px !important; right: 1px !important; } }`,\n          )\n          // PWM badges\n          safeInsertRule(\n            styleEl.sheet,\n            `[data-input-otp] + * { pointer-events: all !important; }`,\n          )\n        }\n      }\n      // Track root height\n      const updateRootHeight = () => {\n        if (container) {\n          container.style.setProperty(\n            '--root-height',\n            `${input.clientHeight}px`,\n          )\n        }\n      }\n      updateRootHeight()\n      const resizeObserver = new ResizeObserver(updateRootHeight)\n      resizeObserver.observe(input)\n\n      return () => {\n        document.removeEventListener(\n          'selectionchange',\n          onDocumentSelectionChange,\n          { capture: true },\n        )\n        resizeObserver.disconnect()\n      }\n    }, [])\n\n    /** Mirrors for UI rendering purpose only */\n    const [isHoveringInput, setIsHoveringInput] = React.useState(false)\n    const [isFocused, setIsFocused] = React.useState(false)\n    const [mirrorSelectionStart, setMirrorSelectionStart] = React.useState<\n      number | null\n    >(null)\n    const [mirrorSelectionEnd, setMirrorSelectionEnd] = React.useState<\n      number | null\n    >(null)\n\n    /** Effects */\n    React.useEffect(() => {\n      syncTimeouts(() => {\n        // Forcefully remove :autofill state\n        inputRef.current?.dispatchEvent(new Event('input'))\n\n        // Update the selection state\n        const s = inputRef.current?.selectionStart\n        const e = inputRef.current?.selectionEnd\n        const dir = inputRef.current?.selectionDirection\n        if (s !== null && e !== null) {\n          setMirrorSelectionStart(s)\n          setMirrorSelectionEnd(e)\n          inputMetadataRef.current.prev = [s, e, dir]\n        }\n      })\n    }, [value, isFocused])\n\n    React.useEffect(() => {\n      if (previousValue === undefined) {\n        return\n      }\n\n      if (\n        value !== previousValue &&\n        previousValue.length < maxLength &&\n        value.length === maxLength\n      ) {\n        onComplete?.(value)\n      }\n    }, [maxLength, onComplete, previousValue, value])\n\n    const pwmb = usePasswordManagerBadge({\n      inputRef,\n      pwmAreaRef: pwmAreaRef,\n      pushPasswordManagerStrategy,\n      isFocused,\n    })\n\n    /** Event handlers */\n    const _changeListener = React.useCallback(\n      (e: React.ChangeEvent<HTMLInputElement>) => {\n        const newValue = e.currentTarget.value.slice(0, maxLength)\n        if (newValue.length > 0 && regexp && !regexp.test(newValue)) {\n          e.preventDefault()\n          return\n        }\n        onChange(newValue)\n      },\n      [maxLength, onChange, regexp],\n    )\n    const _focusListener = React.useCallback(() => {\n      if (inputRef.current) {\n        const start = Math.min(inputRef.current.value.length, maxLength - 1)\n        const end = inputRef.current.value.length\n        inputRef.current?.setSelectionRange(start, end)\n        setMirrorSelectionStart(start)\n        setMirrorSelectionEnd(end)\n      }\n      setIsFocused(true)\n    }, [maxLength])\n    // Fix iOS pasting\n    const _pasteListener = React.useCallback(\n      (e: React.ClipboardEvent<HTMLInputElement>) => {\n        const input = inputRef.current\n        if (!initialLoadRef.current.isIOS || !e.clipboardData || !input) {\n          return\n        }\n\n        const content = e.clipboardData.getData('text/plain')\n        e.preventDefault()\n\n        const start = inputRef.current?.selectionStart\n        const end = inputRef.current?.selectionEnd\n\n        const isReplacing = start !== end\n\n        const newValueUncapped = isReplacing\n          ? value.slice(0, start) + content + value.slice(end) // Replacing\n          : value.slice(0, start) + content + value.slice(start) // Inserting\n        const newValue = newValueUncapped.slice(0, maxLength)\n\n        if (newValue.length > 0 && regexp && !regexp.test(newValue)) {\n          return\n        }\n\n        input.value = newValue\n        onChange(newValue)\n\n        const _start = Math.min(newValue.length, maxLength - 1)\n        const _end = newValue.length\n\n        input.setSelectionRange(_start, _end)\n        setMirrorSelectionStart(_start)\n        setMirrorSelectionEnd(_end)\n      },\n      [maxLength, onChange, regexp, value],\n    )\n\n    /** Styles */\n    const rootStyle = React.useMemo<React.CSSProperties>(\n      () => ({\n        position: 'relative',\n        cursor: props.disabled ? 'default' : 'text',\n        userSelect: 'none',\n        WebkitUserSelect: 'none',\n        pointerEvents: 'none',\n        // clipPath: willPushPWMBadge ? 'inset(-2px)' : undefined,\n      }),\n      [props.disabled],\n    )\n\n    const inputStyle = React.useMemo<React.CSSProperties>(\n      () => ({\n        position: 'absolute',\n        inset: 0,\n        width: pwmb.willPushPWMBadge\n          ? `calc(100% + ${pwmb.PWM_BADGE_SPACE_WIDTH})`\n          : '100%',\n        height: '100%',\n        display: 'flex',\n        textAlign,\n        opacity: '1', // Mandatory for iOS hold-paste\n        color: 'transparent',\n        pointerEvents: 'all',\n        background: 'transparent',\n        caretColor: 'transparent',\n        border: '0 solid transparent',\n        outline: '0 solid transparent',\n        boxShadow: 'none',\n        lineHeight: '1',\n        letterSpacing: '-.5em',\n        fontSize: 'var(--root-height)',\n        fontFamily: 'monospace',\n        fontVariantNumeric: 'tabular-nums',\n        // letterSpacing: '-1em',\n        // transform: 'scale(1.5)',\n        // paddingRight: '100%',\n        // paddingBottom: '100%',\n        // debugging purposes\n        // inset: undefined,\n        // position: undefined,\n        // color: 'black',\n        // background: 'white',\n        // opacity: '1',\n        // caretColor: 'black',\n        // padding: '0',\n        // letterSpacing: 'unset',\n      }),\n      [pwmb.PWM_BADGE_SPACE_WIDTH, pwmb.willPushPWMBadge, textAlign],\n    )\n\n    /** Rendering */\n    const renderedInput = React.useMemo(\n      () => (\n        <input\n          autoComplete={props.autoComplete || 'one-time-code'}\n          {...props}\n          data-input-otp\n          data-input-otp-mss={mirrorSelectionStart}\n          data-input-otp-mse={mirrorSelectionEnd}\n          inputMode={inputMode}\n          pattern={regexp?.source}\n          style={inputStyle}\n          maxLength={maxLength}\n          value={value}\n          ref={inputRef}\n          onPaste={e => {\n            _pasteListener(e)\n            props.onPaste?.(e)\n          }}\n          onChange={_changeListener}\n          onMouseOver={e => {\n            setIsHoveringInput(true)\n            props.onMouseOver?.(e)\n          }}\n          onMouseLeave={e => {\n            setIsHoveringInput(false)\n            props.onMouseLeave?.(e)\n          }}\n          onFocus={e => {\n            _focusListener()\n            props.onFocus?.(e)\n          }}\n          onBlur={e => {\n            setIsFocused(false)\n            props.onBlur?.(e)\n          }}\n        />\n      ),\n      [\n        _changeListener,\n        _focusListener,\n        _pasteListener,\n        inputMode,\n        inputStyle,\n        maxLength,\n        mirrorSelectionEnd,\n        mirrorSelectionStart,\n        props,\n        regexp?.source,\n        value,\n      ],\n    )\n\n    const renderedChildren = React.useMemo<ReturnType<typeof render>>(() => {\n      return render({\n        slots: Array.from({ length: maxLength }).map((_, slotIdx) => {\n          const isActive =\n            isFocused &&\n            mirrorSelectionStart !== null &&\n            mirrorSelectionEnd !== null &&\n            ((mirrorSelectionStart === mirrorSelectionEnd &&\n              slotIdx === mirrorSelectionStart) ||\n              (slotIdx >= mirrorSelectionStart && slotIdx < mirrorSelectionEnd))\n\n          const char = value[slotIdx] !== undefined ? value[slotIdx] : null\n\n          return {\n            char,\n            isActive,\n            hasFakeCaret: isActive && char === null,\n          }\n        }),\n        isFocused,\n        isHovering: !props.disabled && isHoveringInput,\n      })\n    }, [\n      isFocused,\n      isHoveringInput,\n      maxLength,\n      mirrorSelectionEnd,\n      mirrorSelectionStart,\n      props.disabled,\n      render,\n      value,\n    ])\n\n    return (\n      <>\n        {noScriptCSSFallback !== null && (\n          <noscript>\n            <style>{noScriptCSSFallback}</style>\n          </noscript>\n        )}\n\n        <div\n          ref={containerRef}\n          data-input-otp-container\n          style={rootStyle}\n          className={containerClassName}\n        >\n          <div\n            ref={pwmAreaRef}\n            style={{\n              position: 'absolute',\n              top: 0,\n              right: `calc(-1 * ${pwmb.PWM_BADGE_SPACE_WIDTH})`,\n              bottom: 0,\n              left: '100%',\n              pointerEvents: 'none',\n              userSelect: 'none',\n              background: 'transparent',\n            }}\n          />\n\n          {renderedChildren}\n\n          <div\n            style={{\n              position: 'absolute',\n              inset: 0,\n              pointerEvents: 'none',\n            }}\n          >\n            {renderedInput}\n          </div>\n        </div>\n      </>\n    )\n  },\n)\nOTPInput.displayName = 'Input'\n\nfunction safeInsertRule(sheet: CSSStyleSheet, rule: string) {\n  try {\n    sheet.insertRule(rule)\n  } catch {\n    console.error('input-otp could not insert CSS rule:', rule)\n  }\n}\n\n// Decided to go with <noscript>\n// instead of `scripting` CSS media query\n// because it's a fallback for initial page load\n// and the <script> tag won't be loaded\n// unless the user has JS disabled.\nconst NOSCRIPT_CSS_FALLBACK = `\n[data-input-otp] {\n  --nojs-bg: white !important;\n  --nojs-fg: black !important;\n\n  background-color: var(--nojs-bg) !important;\n  color: var(--nojs-fg) !important;\n  caret-color: var(--nojs-fg) !important;\n  letter-spacing: .25em !important;\n  text-align: center !important;\n  border: 1px solid var(--nojs-fg) !important;\n  border-radius: 4px !important;\n  width: 100% !important;\n}\n@media (prefers-color-scheme: dark) {\n  [data-input-otp] {\n    --nojs-bg: black !important;\n    --nojs-fg: white !important;\n  }\n}`\n","export const REGEXP_ONLY_DIGITS = '^\\\\d+$'\nexport const REGEXP_ONLY_CHARS = '^[a-zA-Z]+$'\nexport const REGEXP_ONLY_DIGITS_AND_CHARS = '^[a-zA-Z0-9]+$'\n","export function syncTimeouts(cb: (...args: any[]) => unknown): number[] {\n  const t1 = setTimeout(cb, 0) // For faster machines\n  const t2 = setTimeout(cb, 1_0)\n  const t3 = setTimeout(cb, 5_0)\n  return [t1, t2, t3]\n}\n","import * as React from 'react'\nimport { OTPInputProps } from './types'\n\nconst PWM_BADGE_MARGIN_RIGHT = 18\nconst PWM_BADGE_SPACE_WIDTH = '40px'\n\nconst PASSWORD_MANAGERS_SELECTORS = [\n  '[data-lastpass-icon-root]', // LastPass\n  'com-1password-button', // 1Password\n  '[data-dashlanecreated]', // Dashlane\n  '[style$=\"2147483647 !important;\"]', // Bitwarden\n].join(',')\n\nexport function usePasswordManagerBadge({\n  inputRef,\n  pwmAreaRef,\n  pushPasswordManagerStrategy,\n  isFocused,\n}: {\n  inputRef: React.RefObject<HTMLInputElement>\n  pwmAreaRef: React.RefObject<HTMLDivElement>\n  pushPasswordManagerStrategy: OTPInputProps['pushPasswordManagerStrategy']\n  isFocused: boolean\n}) {\n  // Metadata for instant updates (not React state)\n  const pwmMetadata = React.useRef<{\n    done: boolean\n    refocused: boolean\n  }>({\n    done: false,\n    refocused: false,\n  })\n\n  /** Password managers have a badge\n   *  and I'll use this state to push them\n   *  outside the input */\n  const [hasPWMBadge, setHasPWMBadge] = React.useState(false)\n  const [hasPWMBadgeSpace, setHasPWMBadgeSpace] = React.useState(false)\n  const [done, setDone] = React.useState(false)\n\n  const willPushPWMBadge = React.useMemo(() => {\n    if (pushPasswordManagerStrategy === 'none') {\n      return false\n    }\n\n    const noFlickeringCase =\n      pushPasswordManagerStrategy === 'experimental-no-flickering' &&\n      (!done || (done && hasPWMBadgeSpace && hasPWMBadge))\n\n    const increaseWidthCase =\n      pushPasswordManagerStrategy === 'increase-width' &&\n      hasPWMBadge &&\n      hasPWMBadgeSpace\n\n    return increaseWidthCase || noFlickeringCase\n  }, [done, hasPWMBadge, hasPWMBadgeSpace, pushPasswordManagerStrategy])\n\n  const trackPWMBadge = React.useCallback(() => {\n    const input = inputRef.current\n    const pwmArea = pwmAreaRef.current\n    if (!input || !pwmArea || done || pushPasswordManagerStrategy === 'none') {\n      return\n    }\n\n    const elementToCompare =\n      pushPasswordManagerStrategy === 'increase-width' ? input : pwmArea\n\n    // Get the top right-center point of the input.\n    // That is usually where most password managers place their badge.\n    const rightCornerX =\n      elementToCompare.getBoundingClientRect().left +\n      elementToCompare.offsetWidth\n    const centereredY =\n      elementToCompare.getBoundingClientRect().top +\n      elementToCompare.offsetHeight / 2\n    const x = rightCornerX - PWM_BADGE_MARGIN_RIGHT\n    const y = centereredY\n    const maybeBadgeEl = document.elementFromPoint(x, y)\n\n    // Do an extra search to check for famous password managers\n    const pmws = document.querySelectorAll(PASSWORD_MANAGERS_SELECTORS)\n\n    const maybeHasBadge =\n      pmws.length > 0 ||\n      // If the found element is not the input itself,\n      // then we assume it's a password manager badge.\n      // We are not sure. Most times it'll be.\n      maybeBadgeEl !== input\n\n    if (!maybeHasBadge) {\n      return\n    }\n\n    setHasPWMBadge(true)\n    setDone(true)\n\n    // For specific password managers,\n    // the input has to be re-focused\n    // to trigger a re-position of the badge.\n    if (!pwmMetadata.current.refocused && document.activeElement === input) {\n      const sel = [input.selectionStart, input.selectionEnd]\n      input.blur()\n      input.focus()\n      // Recover the previous selection\n      input.setSelectionRange(sel[0], sel[1])\n\n      pwmMetadata.current.refocused = true\n    }\n  }, [done, inputRef, pushPasswordManagerStrategy, pwmAreaRef])\n\n  React.useEffect(() => {\n    // Check if the PWM area is 100% visible\n    const observer = new IntersectionObserver(\n      entries => {\n        const entry = entries[0]\n        setHasPWMBadgeSpace(entry.intersectionRatio > 0.99)\n      },\n      { threshold: 1, root: null, rootMargin: '0px' },\n    )\n\n    pwmAreaRef.current && observer.observe(pwmAreaRef.current)\n\n    return () => {\n      observer.disconnect()\n    }\n  }, [pwmAreaRef])\n\n  React.useEffect(() => {\n    const _isFocused = isFocused || document.activeElement === inputRef.current\n\n    if (pushPasswordManagerStrategy === 'none' || !_isFocused) {\n      return\n    }\n    const t1 = setTimeout(trackPWMBadge, 0)\n    const t2 = setTimeout(trackPWMBadge, 2000)\n    const t3 = setTimeout(trackPWMBadge, 5000)\n    const t4 = setTimeout(() => {\n      setDone(true)\n    }, 6000)\n    return () => {\n      clearTimeout(t1)\n      clearTimeout(t2)\n      clearTimeout(t3)\n      clearTimeout(t4)\n    }\n  }, [inputRef, isFocused, pushPasswordManagerStrategy, trackPWMBadge])\n\n  return { willPushPWMBadge, PWM_BADGE_SPACE_WIDTH }\n}\n","import * as React from 'react'\n\nexport function usePrevious<T>(value: T) {\n  const ref = React.useRef<T>()\n  React.useEffect(() => {\n    ref.current = value\n  })\n  return ref.current\n}\n"],"mappings":"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","names":["src_exports","__export","OTPInput","REGEXP_ONLY_CHARS","REGEXP_ONLY_DIGITS","REGEXP_ONLY_DIGITS_AND_CHARS","__toCommonJS","React","REGEXP_ONLY_DIGITS","REGEXP_ONLY_CHARS","REGEXP_ONLY_DIGITS_AND_CHARS","syncTimeouts","cb","t1","t2","t3","React","PWM_BADGE_MARGIN_RIGHT","PWM_BADGE_SPACE_WIDTH","PASSWORD_MANAGERS_SELECTORS","usePasswordManagerBadge","inputRef","pwmAreaRef","pushPasswordManagerStrategy","isFocused","pwmMetadata","hasPWMBadge","setHasPWMBadge","hasPWMBadgeSpace","setHasPWMBadgeSpace","done","setDone","willPushPWMBadge","trackPWMBadge","input","pwmArea","elementToCompare","rightCornerX","centereredY","x","y","maybeBadgeEl","sel","observer","entries","entry","_isFocused","t1","t2","t3","t4","React","usePrevious","value","ref","OTPInput","_a","ref","_b","uncheckedValue","uncheckedOnChange","maxLength","textAlign","pattern","REGEXP_ONLY_DIGITS","inputMode","onComplete","pushPasswordManagerStrategy","render","containerClassName","noScriptCSSFallback","NOSCRIPT_CSS_FALLBACK","props","__objRest","_c","_d","internalValue","setInternalValue","value","previousValue","usePrevious","onChange","newValue","regexp","inputRef","containerRef","pwmAreaRef","initialLoadRef","inputMetadataRef","input","container","onDocumentSelectionChange","setMirrorSelectionStart","setMirrorSelectionEnd","_s","_e","_dir","_ml","_val","_prev","start","end","direction","isSingleCaret","isInsertMode","c","offset","wasPreviouslyInserting","s","e","dir","setIsFocused","styleEl","autofillStyles","safeInsertRule","updateRootHeight","resizeObserver","isHoveringInput","setIsHoveringInput","isFocused","mirrorSelectionStart","mirrorSelectionEnd","syncTimeouts","pwmb","usePasswordManagerBadge","_changeListener","_focusListener","_pasteListener","content","_start","_end","rootStyle","inputStyle","renderedInput","__spreadProps","__spreadValues","renderedChildren","_","slotIdx","isActive","char","sheet","rule"]}