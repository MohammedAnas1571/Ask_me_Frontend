import * as React$1 from 'react';

interface SlotProps {
    isActive: boolean;
    char: string | null;
    hasFakeCaret: boolean;
}
interface RenderProps {
    slots: SlotProps[];
    isFocused: boolean;
    isHovering: boolean;
}
type OverrideProps<T, R> = Omit<T, keyof R> & R;
type OTPInputProps = OverrideProps<React.InputHTMLAttributes<HTMLInputElement>, {
    value?: string;
    onChange?: (newValue: string) => unknown;
    maxLength: number;
    textAlign?: 'left' | 'center' | 'right';
    inputMode?: 'numeric' | 'text';
    onComplete?: (...args: any[]) => unknown;
    pushPasswordManagerStrategy?: 'increase-width' | 'none' | 'experimental-no-flickering';
    render: (props: RenderProps) => React.ReactElement;
    containerClassName?: string;
    noScriptCSSFallback?: string | null;
}>;

declare const OTPInput: React$1.ForwardRefExoticComponent<Omit<React$1.InputHTMLAttributes<HTMLInputElement>, "maxLength" | "value" | "onChange" | "inputMode" | "textAlign" | "onComplete" | "pushPasswordManagerStrategy" | "render" | "containerClassName" | "noScriptCSSFallback"> & {
    value?: string;
    onChange?: (newValue: string) => unknown;
    maxLength: number;
    textAlign?: "left" | "center" | "right";
    inputMode?: "numeric" | "text";
    onComplete?: (...args: any[]) => unknown;
    pushPasswordManagerStrategy?: "increase-width" | "none" | "experimental-no-flickering";
    render: (props: RenderProps) => React$1.ReactElement<any, string | React$1.JSXElementConstructor<any>>;
    containerClassName?: string;
    noScriptCSSFallback?: string;
} & React$1.RefAttributes<HTMLInputElement>>;

declare const REGEXP_ONLY_DIGITS = "^\\d+$";
declare const REGEXP_ONLY_CHARS = "^[a-zA-Z]+$";
declare const REGEXP_ONLY_DIGITS_AND_CHARS = "^[a-zA-Z0-9]+$";

export { OTPInput, type OTPInputProps, REGEXP_ONLY_CHARS, REGEXP_ONLY_DIGITS, REGEXP_ONLY_DIGITS_AND_CHARS, type RenderProps, type SlotProps };
